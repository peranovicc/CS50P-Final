'''
Tool for generating assignments and tests based on payload

{
  "title": "Title of an assignment",
  "description": "- This description\n- Supports **markdown**",
  "tests": {
    "shown": [
      {
        "input": "[1,2,3,4,5]",
        "output": "1",
        "group": "group1"
      }
    ],
    "hidden":[{}]
  },
  "function_name": "get_minimum"
}
'''

import json

def generate_assignment(json_payload, template_path=None):
    '''
    Create and return markdown based on json_payload and provided template

    Example of json_payload:\n
    {
        "title": "str-md",
        "description": "str-md",
        "tests": {
            "shown": [
                {
                    "input": any,
                    "output": any,
                    "group": "str"
                }
            ]
        },
        "function_name": "str"
    }

    Template must include:
    - {title}
    - {description}
    - {function_name}
    - {input_output_table}
        - |{input}|{output}| for each test case
    '''

    assignment = ''
    with open(template_path) as template_file:
        assignment = template_file.read()

    data = json.loads(json_payload)

    input_output_list = [(x.get('input'), x.get('output')) for x in data['tests']['shown']]
    input_output_table = '\n'.join([f'|{x}|{y}|' for (x,y) in input_output_list])

    data["input_output_table"] = input_output_table
    assignment = assignment.format(**data)
    
    return assignment

def generate_tests(json_payload, module_name='generated_module'):
    '''
    Returns usable test file as a string

    Each test case is one assertion
    Assertions are grouped in separated test functions
    '''

    data = json.loads(json_payload)
    tests = data['tests']['shown'] + data['tests']['hidden']
    function_name = data.get('function_name')

    function_string = f'from {module_name} import {function_name}\n\n'

    grouped_tests = {}

    for test in tests:
        if test.get('group') in grouped_tests:
            grouped_tests[test.get('group')].append(test)
        else:
            grouped_tests[test.get('group')] = [test]

    for group, tests in grouped_tests.items():
        function_string += generate_test_function(group, tests, data['function_name']) + '\n'

    return function_string

def generate_test_function(group, tests, fn_name):
    fn_string = f'def test_{group}():'
    for test in tests:
        tmp = generate_assertion(test.get('input'), test.get('output'), fn_name)
        fn_string += f'\n    {tmp}'
    return fn_string + '\n'

def generate_assertion(input, output, fn_name):
    return f'assert {fn_name}({input}) == {output}'



def main():
    '''
    Used for testing module functions
    '''
    test_data = '{\"title\":\"Title of an assignment\",\"description\":\"- This description\\n- Supports **markdown**\",\"tests\":{\"shown\":[{\"input\":[1,2,3,4,5],\"output\":\"1\",\"group\":\"group1\"},{\"input\":[1,2,3,4,5,232,-1,232,2],\"output\":\"-1\",\"group\":\"group1\"}],\"hidden\":[{\"input\":\"[]\",\"output\":\"None\",\"group\":\"hidden1\"},{\"input\":\"[1,1,1]\",\"output\":\"1\",\"group\":\"hidden2\"},{\"input\":\"[1]\",\"output\":\"1\",\"group\":\"hidden1\"},{\"input\":\"[0,-1,1]\",\"output\":\"1\",\"group\":\"hidden2\"},{\"input\":\"[99,22,3,66]\",\"output\":\"3\",\"group\":\"hidden2\"}]},\"function_name\":\"get_minimum\"}'

    # with open('autogenerated_markdown.md', 'w') as file:
    #     file.write(generate_assignment(test_data, './resources/assignment_template.md'))

    with open('autogenerated_tests.py', 'w') as test_file:
        test_file.write(generate_tests(test_data))

if __name__ == "__main__":
    main()
